// Generated by gencpp from file rrt_star/rrt_starRequest.msg
// DO NOT EDIT!


#ifndef RRT_STAR_MESSAGE_RRT_STARREQUEST_H
#define RRT_STAR_MESSAGE_RRT_STARREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rrt_star
{
template <class ContainerAllocator>
struct rrt_starRequest_
{
  typedef rrt_starRequest_<ContainerAllocator> Type;

  rrt_starRequest_()
    : X1(0.0)
    , Y1(0.0)
    , X2(0.0)
    , Y2(0.0)  {
    }
  rrt_starRequest_(const ContainerAllocator& _alloc)
    : X1(0.0)
    , Y1(0.0)
    , X2(0.0)
    , Y2(0.0)  {
  (void)_alloc;
    }



   typedef float _X1_type;
  _X1_type X1;

   typedef float _Y1_type;
  _Y1_type Y1;

   typedef float _X2_type;
  _X2_type X2;

   typedef float _Y2_type;
  _Y2_type Y2;





  typedef boost::shared_ptr< ::rrt_star::rrt_starRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rrt_star::rrt_starRequest_<ContainerAllocator> const> ConstPtr;

}; // struct rrt_starRequest_

typedef ::rrt_star::rrt_starRequest_<std::allocator<void> > rrt_starRequest;

typedef boost::shared_ptr< ::rrt_star::rrt_starRequest > rrt_starRequestPtr;
typedef boost::shared_ptr< ::rrt_star::rrt_starRequest const> rrt_starRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rrt_star::rrt_starRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rrt_star::rrt_starRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rrt_star::rrt_starRequest_<ContainerAllocator1> & lhs, const ::rrt_star::rrt_starRequest_<ContainerAllocator2> & rhs)
{
  return lhs.X1 == rhs.X1 &&
    lhs.Y1 == rhs.Y1 &&
    lhs.X2 == rhs.X2 &&
    lhs.Y2 == rhs.Y2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rrt_star::rrt_starRequest_<ContainerAllocator1> & lhs, const ::rrt_star::rrt_starRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rrt_star

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rrt_star::rrt_starRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rrt_star::rrt_starRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rrt_star::rrt_starRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rrt_star::rrt_starRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rrt_star::rrt_starRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rrt_star::rrt_starRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rrt_star::rrt_starRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d932f4cd1a6dbfdd4cd7d1cc6f4496d5";
  }

  static const char* value(const ::rrt_star::rrt_starRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd932f4cd1a6dbfddULL;
  static const uint64_t static_value2 = 0x4cd7d1cc6f4496d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::rrt_star::rrt_starRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rrt_star/rrt_starRequest";
  }

  static const char* value(const ::rrt_star::rrt_starRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rrt_star::rrt_starRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 X1\n"
"float32 Y1\n"
"float32 X2\n"
"float32 Y2\n"
;
  }

  static const char* value(const ::rrt_star::rrt_starRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rrt_star::rrt_starRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X1);
      stream.next(m.Y1);
      stream.next(m.X2);
      stream.next(m.Y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rrt_starRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rrt_star::rrt_starRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rrt_star::rrt_starRequest_<ContainerAllocator>& v)
  {
    s << indent << "X1: ";
    Printer<float>::stream(s, indent + "  ", v.X1);
    s << indent << "Y1: ";
    Printer<float>::stream(s, indent + "  ", v.Y1);
    s << indent << "X2: ";
    Printer<float>::stream(s, indent + "  ", v.X2);
    s << indent << "Y2: ";
    Printer<float>::stream(s, indent + "  ", v.Y2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RRT_STAR_MESSAGE_RRT_STARREQUEST_H
