// Generated by gencpp from file rrt_star/rrt_starResponse.msg
// DO NOT EDIT!


#ifndef RRT_STAR_MESSAGE_RRT_STARRESPONSE_H
#define RRT_STAR_MESSAGE_RRT_STARRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rrt_star
{
template <class ContainerAllocator>
struct rrt_starResponse_
{
  typedef rrt_starResponse_<ContainerAllocator> Type;

  rrt_starResponse_()
    : path_result(false)
    , time_result(0.0)  {
    }
  rrt_starResponse_(const ContainerAllocator& _alloc)
    : path_result(false)
    , time_result(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _path_result_type;
  _path_result_type path_result;

   typedef float _time_result_type;
  _time_result_type time_result;





  typedef boost::shared_ptr< ::rrt_star::rrt_starResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rrt_star::rrt_starResponse_<ContainerAllocator> const> ConstPtr;

}; // struct rrt_starResponse_

typedef ::rrt_star::rrt_starResponse_<std::allocator<void> > rrt_starResponse;

typedef boost::shared_ptr< ::rrt_star::rrt_starResponse > rrt_starResponsePtr;
typedef boost::shared_ptr< ::rrt_star::rrt_starResponse const> rrt_starResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rrt_star::rrt_starResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rrt_star::rrt_starResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rrt_star::rrt_starResponse_<ContainerAllocator1> & lhs, const ::rrt_star::rrt_starResponse_<ContainerAllocator2> & rhs)
{
  return lhs.path_result == rhs.path_result &&
    lhs.time_result == rhs.time_result;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rrt_star::rrt_starResponse_<ContainerAllocator1> & lhs, const ::rrt_star::rrt_starResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rrt_star

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::rrt_star::rrt_starResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rrt_star::rrt_starResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rrt_star::rrt_starResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rrt_star::rrt_starResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rrt_star::rrt_starResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rrt_star::rrt_starResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rrt_star::rrt_starResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74207e5810b32b18ad0309953955f675";
  }

  static const char* value(const ::rrt_star::rrt_starResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74207e5810b32b18ULL;
  static const uint64_t static_value2 = 0xad0309953955f675ULL;
};

template<class ContainerAllocator>
struct DataType< ::rrt_star::rrt_starResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rrt_star/rrt_starResponse";
  }

  static const char* value(const ::rrt_star::rrt_starResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rrt_star::rrt_starResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool path_result\n"
"float32 time_result\n"
;
  }

  static const char* value(const ::rrt_star::rrt_starResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rrt_star::rrt_starResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_result);
      stream.next(m.time_result);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rrt_starResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rrt_star::rrt_starResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rrt_star::rrt_starResponse_<ContainerAllocator>& v)
  {
    s << indent << "path_result: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.path_result);
    s << indent << "time_result: ";
    Printer<float>::stream(s, indent + "  ", v.time_result);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RRT_STAR_MESSAGE_RRT_STARRESPONSE_H
